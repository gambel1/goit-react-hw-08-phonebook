{"version":3,"file":"static/js/68.1fe9b0d3.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.phonebook.contacts.items;\nexport const selectFilter = state => state.phonebook.filter;\nexport const selectIsLoading = state => state.phonebook.contacts.isLoading;\nexport const selectError = state => state.phonebook.contacts.error;\nexport const selectArray = state => state.phonebook.contacts;\n","import { Form, Field } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column; \n  align-items: center;\n`;\n\nexport const FormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: var(--border-margin-padding);\n`;\n\nexport const FormLabel = styled.label`\n  font-size: var(--font-size-subtitle);\n`;\n\nexport const FormInput = styled(Field)`\n  padding: var(--border-margin-padding);\n  font-size: 20px;\n  font-weight: bold;\n  background-color: #cccccc;\n  border-radius: var(--border-margin-padding);\n`;\n\nexport const FormButton = styled.button`\n  font-size: var(--font-size-buttons);\n  padding: 5px 15px;\n  margin: 10px 0 15px 0;\n  cursor: pointer;\n  border: solid 2px #000;\n  border-radius: var(--border-margin-padding);\n  background-color: #9b94ce;\n\n  :hover {\n    color: green;\n  }\n`;\n","import { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\nimport {\n  FormContainer,\n  FormWrapper,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2).max(70).required(),\n  number: yup.number().min(4).required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleFormSubmit = (values, { resetForm }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      return Notify.failure(`${values.name} is already in contacts`);\n    }\n    dispatch(addContacts({ ...values }));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleFormSubmit}\n        validationSchema={schema}\n      >\n        <FormContainer>\n          <FormWrapper>\n            <FormLabel htmlFor=\"name\">Name:</FormLabel>\n            <FormInput name=\"name\" type=\"text\" id=\"name\" />\n            <ErrorMessage name=\"name\" />\n          </FormWrapper>\n\n          <FormWrapper>\n            <FormLabel htmlFor=\"number\">Number:</FormLabel>\n            <FormInput name=\"number\" type=\"tel\" id=\"number\" />\n            <ErrorMessage name=\"number\" />\n          </FormWrapper>\n\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </FormContainer>\n      </Formik>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactListUl = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ContactListLi = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  text-align: left;\n  gap: 20px;\n`;\n\nexport const ContactListSpan = styled.span`\n  font-size: var(--font-size-subtitle);\n  font-weight: bold;\n  color: #3b327d;\n`;\n\nexport const ContactListButton = styled.button`\n  font-size: var(--font-size-buttons);\n  padding: 4px 10px;\n\n  cursor: pointer;\n  border: solid 2px #000;\n  border-radius: var(--border-margin-padding);\n  background-color: #9b94ce;\n\n  :hover {\n    color: #e02121;\n  }\n`;\n","import { selectFilter, selectContacts } from 'redux/contacts/selectors';\nimport { deleteContacts } from 'redux/contacts/operations';\n\nimport {\n  ContactListUl,\n  ContactListLi,\n  ContactListSpan,\n  ContactListButton,\n} from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <ContactListUl>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactListLi key={id}>\n              <ContactListSpan>{name}</ContactListSpan>\n              <ContactListSpan>{number}</ContactListSpan>\n              <ContactListButton\n                type=\"button\"\n                onClick={() => dispatch(deleteContacts(id))}\n              >\n                Delete\n              </ContactListButton>\n            </ContactListLi>\n          );\n        })}\n      </ContactListUl>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  font-size: var(--font-size-buttons);\n  margin-bottom: var(--border-margin-padding);\n`;\n\nexport const FilterInput = styled.input`\n  padding: var(--border-margin-padding);\n  font-size: 20px;\n  font-weight: bold;\n  background-color: #cccccc;\n  border-radius: var(--border-margin-padding);\n`;\n","import { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/contactsAsyncThunk';\nimport { FilterWrapper, FilterLabel, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor=\"filter\">Find contacts by name</FilterLabel>\n      <FilterInput\n        name=\"filter\"\n        type=\"text\"\n        id=\"filter\"\n        value={filter}\n        onChange={event => dispatch(filterContacts(event.target.value))}\n      />\n    </FilterWrapper>\n  );\n}\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Helmet } from 'react-helmet';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","phonebook","contacts","items","selectFilter","filter","selectIsLoading","isLoading","FormContainer","styled","Form","FormWrapper","FormLabel","FormInput","Field","FormButton","schema","yup","shape","name","min","max","required","number","initialValues","ContactForm","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","find","contact","toLowerCase","Notify","addContacts","validationSchema","htmlFor","type","id","ContactListUl","ContactListLi","ContactListSpan","ContactListButton","ContactList","filteredContacts","includes","map","onClick","deleteContacts","FilterWrapper","FilterLabel","FilterInput","Filter","value","onChange","event","filterContacts","target","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}